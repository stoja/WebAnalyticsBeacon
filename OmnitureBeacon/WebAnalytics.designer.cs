#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OmnitureBeacon
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WebAnalytics")]
	public partial class WebAnalyticsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertDefinition(Definition instance);
    partial void UpdateDefinition(Definition instance);
    partial void DeleteDefinition(Definition instance);
    #endregion
		
		public WebAnalyticsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WebAnalyticsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WebAnalyticsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebAnalyticsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebAnalyticsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebAnalyticsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<Definition> Definitions
		{
			get
			{
				return this.GetTable<Definition>();
			}
		}
		
		public System.Data.Linq.Table<Baseline> Baselines
		{
			get
			{
				return this.GetTable<Baseline>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDefinitionID")]
		public int GetDefinitionID([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string host, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(400)")] string referrer, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(200)")] string pageName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string varName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> definitionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), host, referrer, pageName, varName, definitionID);
			definitionID = ((System.Nullable<int>)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DoesVarResultAlreadyExist")]
		public int DoesVarResultAlreadyExist([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> definition_id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string expected_result, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> definitionID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), definition_id, expected_result, definitionID);
			definitionID = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Result")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _definition_id;
		
		private string _actual_result;
		
		private System.DateTime _time_stamp;
		
		private EntityRef<Definition> _Definition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondefinition_idChanging(int value);
    partial void Ondefinition_idChanged();
    partial void Onactual_resultChanging(string value);
    partial void Onactual_resultChanged();
    partial void Ontime_stampChanging(System.DateTime value);
    partial void Ontime_stampChanged();
    #endregion
		
		public Result()
		{
			this._Definition = default(EntityRef<Definition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_definition_id", DbType="Int NOT NULL")]
		public int definition_id
		{
			get
			{
				return this._definition_id;
			}
			set
			{
				if ((this._definition_id != value))
				{
					if (this._Definition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondefinition_idChanging(value);
					this.SendPropertyChanging();
					this._definition_id = value;
					this.SendPropertyChanged("definition_id");
					this.Ondefinition_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actual_result", DbType="VarChar(MAX)")]
		public string actual_result
		{
			get
			{
				return this._actual_result;
			}
			set
			{
				if ((this._actual_result != value))
				{
					this.Onactual_resultChanging(value);
					this.SendPropertyChanging();
					this._actual_result = value;
					this.SendPropertyChanged("actual_result");
					this.Onactual_resultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_stamp", DbType="DateTime NOT NULL")]
		public System.DateTime time_stamp
		{
			get
			{
				return this._time_stamp;
			}
			set
			{
				if ((this._time_stamp != value))
				{
					this.Ontime_stampChanging(value);
					this.SendPropertyChanging();
					this._time_stamp = value;
					this.SendPropertyChanged("time_stamp");
					this.Ontime_stampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_Result", Storage="_Definition", ThisKey="definition_id", OtherKey="id", IsForeignKey=true)]
		public Definition Definition
		{
			get
			{
				return this._Definition.Entity;
			}
			set
			{
				Definition previousValue = this._Definition.Entity;
				if (((previousValue != value) 
							|| (this._Definition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Definition.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._Definition.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._definition_id = value.id;
					}
					else
					{
						this._definition_id = default(int);
					}
					this.SendPropertyChanged("Definition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Definition")]
	public partial class Definition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _host;
		
		private string _url;
		
		private string _page_name;
		
		private string _var_name;
		
		private string _referrer;
		
		private EntitySet<Result> _Results;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnhostChanging(string value);
    partial void OnhostChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void Onpage_nameChanging(string value);
    partial void Onpage_nameChanged();
    partial void Onvar_nameChanging(string value);
    partial void Onvar_nameChanged();
    partial void OnreferrerChanging(string value);
    partial void OnreferrerChanged();
    #endregion
		
		public Definition()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_host", DbType="VarChar(100)")]
		public string host
		{
			get
			{
				return this._host;
			}
			set
			{
				if ((this._host != value))
				{
					this.OnhostChanging(value);
					this.SendPropertyChanging();
					this._host = value;
					this.SendPropertyChanged("host");
					this.OnhostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_page_name", DbType="VarChar(200)")]
		public string page_name
		{
			get
			{
				return this._page_name;
			}
			set
			{
				if ((this._page_name != value))
				{
					this.Onpage_nameChanging(value);
					this.SendPropertyChanging();
					this._page_name = value;
					this.SendPropertyChanged("page_name");
					this.Onpage_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_var_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string var_name
		{
			get
			{
				return this._var_name;
			}
			set
			{
				if ((this._var_name != value))
				{
					this.Onvar_nameChanging(value);
					this.SendPropertyChanging();
					this._var_name = value;
					this.SendPropertyChanged("var_name");
					this.Onvar_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_referrer", DbType="VarChar(400)")]
		public string referrer
		{
			get
			{
				return this._referrer;
			}
			set
			{
				if ((this._referrer != value))
				{
					this.OnreferrerChanging(value);
					this.SendPropertyChanging();
					this._referrer = value;
					this.SendPropertyChanged("referrer");
					this.OnreferrerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Definition_Result", Storage="_Results", ThisKey="id", OtherKey="definition_id")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Definition = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.Definition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Baseline")]
	public partial class Baseline
	{
		
		private int _id;
		
		private int _definition_id;
		
		private string _expected_value;
		
		private System.DateTime _time_stamp;
		
		public Baseline()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_definition_id", DbType="Int NOT NULL")]
		public int definition_id
		{
			get
			{
				return this._definition_id;
			}
			set
			{
				if ((this._definition_id != value))
				{
					this._definition_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expected_value", DbType="VarChar(MAX)")]
		public string expected_value
		{
			get
			{
				return this._expected_value;
			}
			set
			{
				if ((this._expected_value != value))
				{
					this._expected_value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_stamp", DbType="DateTime NOT NULL")]
		public System.DateTime time_stamp
		{
			get
			{
				return this._time_stamp;
			}
			set
			{
				if ((this._time_stamp != value))
				{
					this._time_stamp = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
